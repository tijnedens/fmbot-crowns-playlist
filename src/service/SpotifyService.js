import axios from "axios";
import LastfmService from "./LastfmService";

const CLIENT_ID = "db2520a30b4349669473ea28a1b6a6e8";
const REDIRECT_URI = "http://localhost:3000";
const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
const SEARCH_ENDPOINT = "https://api.spotify.com/v1/search";
const RESPONSE_TYPE = "token";

function login() {
  window.location.href = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=playlist-modify-private,playlist-modify-public`;
}

function logout() {
  localStorage.removeItem("spotifyToken");
}

function isLoggedIn() {
  return !!localStorage.getItem("spotifyToken");
}

function getUserInfo() {
  const authToken = localStorage.getItem("spotifyToken");
  return new Promise((resolve, reject) => {
    axios.get("https://api.spotify.com/v1/me", {
      headers: {
        Authorization: "Bearer " + authToken
      }
    }).then((response) => {
      localStorage.setItem("spotifyUserId", response.data.id);
      resolve(response.data);
    }, (error) => {
      logout();
    });
  });
}

async function getSpotifyTrackIds(tracks, updateProgress) {
  const authToken = localStorage.getItem("spotifyToken");
  let trackIds = [];
  updateProgress(35, "Retrieving Spotify track ids");
  for (let [idx, track] of tracks.entries()) {
    let a;
    try {
      a = await axios.get(`${SEARCH_ENDPOINT}?q=${encodeURIComponent(track.name)}%20artist:${encodeURIComponent(track.artist)}&type=track&limit=1`, {
        headers: {
          Authorization: "Bearer " + authToken
        }
      });
      if (a.data.tracks.items.length === 0) {
        a = await axios.get(`${SEARCH_ENDPOINT}?q=${encodeURIComponent(track.name)}%20${encodeURIComponent(track.artist)}&type=track&limit=1`, {
          headers: {
            Authorization: "Bearer " + authToken
          }
        });
      }
    } catch (error) {
      console.log(error);
      return Promise.reject();
    }
    if (a.data.tracks.items.length > 0) {
      trackIds.push(a.data.tracks.items[0].uri);
      updateProgress(35 + Math.floor(30 * idx / tracks.length), `Retrieving Spotify track ids (${idx + 1} / ${tracks.length})`);
    } else {
      console.log(`Couldn't find ${track.name}`);
    }
  }
  return Promise.resolve(trackIds);
}

async function createMinMaxScrobblesPlaylist(name, isPublic, minScrobbles = 25, maxScrobbles = 30, updateProgress) {
  updateProgress(0, "Starting playlist creation...");
  if (!name) {
    return;
  }
  let artistIds = await LastfmService.getArtists(null, minScrobbles, maxScrobbles, updateProgress);

  if (artistIds.length === 0) {
    console.log("DONE");
    updateProgress(100, "No results found with given parameters; No playlist was created.")
    return Promise.reject("NO_RESULTS");
  }

  let lastfmToptracks = await LastfmService.getTopTracks(artistIds, updateProgress);
  let tracks = await getSpotifyTrackIds(lastfmToptracks, updateProgress);

  const userId = localStorage.getItem("spotifyUserId");
  const authToken = localStorage.getItem("spotifyToken");

  updateProgress(65, "Creating playlist on Spotify");
  const plResponse = await axios.post(`https://api.spotify.com/v1/users/${userId}/playlists`, {
    "name": name,
    "description": `Generated by lastfm-crowns-playlist tool with goal = ${maxScrobbles} and minimum = ${minScrobbles}`,
    "public": isPublic
  },
    {
      headers: {
        Authorization: "Bearer " + authToken
      }
    });

  const playlistId = plResponse.data.id;
  updateProgress(70, "Adding tracks to Spotify");

  for (let i = 0; i < Math.ceil(tracks.length / 100); i++) {
    updateProgress(70 + Math.floor(30 * (i * 100) / (1 + Math.min(i * 100, tracks.length))), `Adding tracks to Spotify (${Math.min(i * 100, tracks.length)} / ${tracks.length} )`);
    try {
      await axios.post(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
        uris: tracks.slice(i * 100, (i + 1) * 100)
      },
        {
          headers: {
            Authorization: "Bearer " + authToken
          }
        });
    } catch (error) {
      console.log(error);
      return Promise.reject("ERROR");
    }
    updateProgress()
  }
  console.log("DONE");
  updateProgress(100, `Succesfully created playlist with ${tracks.length} song${tracks.length === 1 ? "" : "s"} from ${artistIds.length} artist${artistIds.length === 1 ? "" : "s"}`);
  return Promise.resolve("DONE");
}

async function createMaxDistanceScrobblesPlaylist(name, otherUserName, isPublic, maxDistance, updateProgress) {
  updateProgress(0, "Starting playlist creation...");
  let otherUser = LastfmService.getUserInfo(otherUserName);
  if (otherUser.error) {
    return;
  }
  let topArtists = await LastfmService.getArtists(null, 30, Infinity, updateProgress);
  let topArtistsOther = await LastfmService.getArtists(otherUserName, 30, Infinity, updateProgress);
  let topArtistsOtherLookup = topArtistsOther.reduce((acc, current) => (acc[current.name] = current.scrobbles, acc), {});

  let closestArtists = [];

  for (const artist of topArtists) {
    let otherScrobbles = topArtistsOtherLookup[artist.name] ?? 0;
    if (parseInt(otherScrobbles) > parseInt(artist.scrobbles) && Math.abs(otherScrobbles - artist.scrobbles) <= maxDistance) {
      artist.count = otherScrobbles - artist.scrobbles + 1;
      closestArtists.push(artist);
    }
  }

  if (closestArtists.length === 0) {
    console.log("DONE");
    updateProgress(100, "No results found with given parameters; No playlist was created.")
    return Promise.reject("NO_RESULTS");
  }

  let lastfmToptracks = await LastfmService.getTopTracks(closestArtists, updateProgress);
  let tracks = await getSpotifyTrackIds(lastfmToptracks, updateProgress);

  const userId = localStorage.getItem("spotifyUserId");
  const authToken = localStorage.getItem("spotifyToken");

  updateProgress(65, "Creating playlist on Spotify");
  const plResponse = await axios.post(`https://api.spotify.com/v1/users/${userId}/playlists`, {
    "name": name,
    "description": `Generated by lastfm-crowns-playlist tool with other user = ${otherUserName}`,
    "public": isPublic
  },
    {
      headers: {
        Authorization: "Bearer " + authToken
      }
    });

  const playlistId = plResponse.data.id;
  updateProgress(70, "Adding tracks to Spotify");

  for (let i = 0; i < Math.ceil(tracks.length / 100); i++) {
    updateProgress(70 + Math.floor(30 * (i * 100) / (1 + Math.min(i * 100, tracks.length))), `Adding tracks to Spotify (${Math.min(i * 100, tracks.length)} / ${tracks.length} )`);
    try {
      await axios.post(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
        uris: tracks.slice(i * 100, (i + 1) * 100)
      },
        {
          headers: {
            Authorization: "Bearer " + authToken
          }
        });
    } catch (error) {
      console.log(error);
      return Promise.reject("ERROR");
    }
    updateProgress()
  }
  console.log("DONE");
  updateProgress(100, `Succesfully created playlist with ${tracks.length} song${tracks.length === 1 ? "" : "s"} from ${closestArtists.length} artist${closestArtists.length === 1 ? "" : "s"}`);
  return Promise.resolve("DONE");

}

const SpotifyService = {
  login,
  logout,
  isLoggedIn,
  getUserInfo,
  createMinMaxScrobblesPlaylist,
  createMaxDistanceScrobblesPlaylist
}

export default SpotifyService;